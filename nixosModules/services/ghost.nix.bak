{
  config,
  lib,
  pkgs,
  pkgs-unstable,
  ...
}: let
  ghost = config.services.ghost;
  domainUnderscore = builtins.replaceStrings ["."] ["_"] ghost.domain;
  dataDir = "/var/www/${domainUnderscore}";
  ghostDummyDir = "/tmp/ghost";
  # script that sets up the Ghost content directory
  setupScript = pkgs.writeScript "${domainUnderscore}-setup.sh" ''
    #! ${pkgs.stdenv.shell} -e

    if [ ! -d "${dataDir}/current" ]; then
      if [ -d "${ghostDummyDir}" ]; then
        rm -rf "${ghostDummyDir}"
      fi
      mkdir -p "${ghostDummyDir}"
      chown -R "ghost":"ghost" "${ghostDummyDir}"
      chmod g+s,o+rx "${ghostDummyDir}"
      ${pkgs-unstable.ghost-cli}/bin/ghost install local --no-prompt --no-enable --no-start --dir "${ghostDummyDir}" 
    fi 

    mkdir -p "${dataDir}"
    chmod g+s,o+rx "${dataDir}"
    [[ ! -d "${dataDir}/content" ]] && cp -r "${ghostDummyDir}/content" "${dataDir}/content"
    chown -R "ghost":"ghost" "${dataDir}/content"
    chmod -R +w "${dataDir}/content"
    ln -f -s "/etc/${domainUnderscore}-ghost.json" "${dataDir}/config.production.json"
    [[ -d "${ghostDummyDir}/current" ]] && rm "${dataDir}/current"
    ln -f -s "${ghostDummyDir}/current" "${dataDir}/current"

  '';
in
  with lib; {
    options.services.ghost = {
      enable = mkEnableOption "Enable ghost blog service.";

      domain = mkOption {
        type = types.str;
        default = "";
        description = "Domain user for ghost, e.g. example.com";
      };

      sslCertPath = mkOption {
        type = types.str;
        description = "The ssl cert.pem file path.";
      };

      sslCertKeyPath = mkOption {
        type = types.str;
        description = "The ssl private key cert.key file path.";
      };
    };

    config = mkIf ghost.enable {
      users.users.ghost = {
        isSystemUser = true;
        group = "ghost";
        createHome = true;
        home = dataDir;
        shell = pkgs.bashInteractive;
      };
      users.groups.ghost = {};

      environment.etc."${domainUnderscore}-ghost.json".text = ''
        {
          "url": "https://${ghost.domain}",
          "server": {
            "port": 2369,
            "host": "127.0.0.1"
          },
          "database": {
            "client": "mysql",
            "connection": {
              "host": "localhost",
              "user": "ghost",
              "password": "",
              "database": "${domainUnderscore}"
            }
          },
          "admin": {
            "url": "https://admin.${ghost.domain}"
          },
          "logging": {
            "transports": [
              "file",
              "stdout"
            ]
          },
          "process": "systemd",
          "paths": {
            "contentPath": "${dataDir}/content"
          }
        }
      '';

      # Sets up the Systemd service
      systemd.services."${domainUnderscore}-ghost" = {
        enable = true;
        description = "${ghost.domain} ghost blog";
        restartIfChanged = true;
        restartTriggers = [config.environment.etc."${domainUnderscore}-ghost.json".source]; # If I have to add a ghost dummy for updates, also include that directory here
        requires = ["mysql.service"];
        after = ["mysql.service"];
        path = [pkgs.nodejs pkgs.vips];
        wantedBy = ["multi-user.target"];
        serviceConfig = {
          User = "ghost";
          Group = "ghost";
          WorkingDirectory = dataDir;
          # Executes the setup script before start
          ExecStartPre = setupScript;
          # Runs Ghost with node
          ExecStart = "${pkgs.nodejs}/bin/node current/index.js";
          # Sandboxes the Systemd service
          AmbientCapabilities = [];
          CapabilityBoundingSet = [];
          KeyringMode = "private";
          LockPersonality = true;
          NoNewPrivileges = true;
          PrivateDevices = true;
          PrivateMounts = true;
          PrivateTmp = true;
          ProtectClock = true;
          ProtectControlGroups = true;
          ProtectHome = true;
          ProtectHostname = true;
          ProtectKernelLogs = true;
          ProtectKernelModules = true;
          ProtectKernelTunables = true;
          ProtectSystem = "full";
          RemoveIPC = true;
          RestrictAddressFamilies = [];
          RestrictNamespaces = true;
          RestrictRealtime = true;
        };
        environment = {NODE_ENV = "production";};
      };

      # Sets up the Nginx web proxy
      services.nginx = {
        enable = true;
        # recommendedGzipSettings = true;
        # recommendedOptimisation = true;
        # recommendedProxySettings = true;
        # recommendedTlsSettings = true;
        virtualHosts."${ghost.domain}" = {
          enableACME = false;
          forceSSL = true;
          http2 = true;

          sslCertificate = ghost.sslCertPath;
          sslCertificateKey = ghost.sslCertKeyPath;

          root = "${dataDir}/system/nginx-root";

          extraConfig = ''
            client_max_body_size 100m;
          '';

          locations."/" = {
            proxyPass = "http://127.0.0.1:2369";
            extraConfig = ''
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header Host $host;

              if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Accept-Version,Credentials,Authorization,DNT,Mode,User-Agent,x-ghost-preview,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
              }
              if ($request_method = 'POST') {
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Credentials,DNT,Mode,User-Agent,x-ghost-preview,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
              }
              if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Credentials,DNT,Mode,User-Agent,X-Requested-With,x-ghost-preview,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
              }
              if ($http_origin = "app://obsidian.md") {
                add_header 'Access-Control-Allow-Origin' '*' always;
              }
            '';
          };

          locations."~ /.well-known" = {
            extraConfig = "allow all;";
          };
        };
      };

      # Sets up MySQL database and user for Ghost
      services.mysql = {
        enable = true;
        package = pkgs.mysql80;
        ensureDatabases = [domainUnderscore];
        ensureUsers = [
          {
            name = "ghost";
            ensurePermissions = {"${domainUnderscore}.*" = "ALL PRIVILEGES";};
          }
        ];
      };

      environment.systemPackages = [pkgs-unstable.ghost-cli];
    };
  }
